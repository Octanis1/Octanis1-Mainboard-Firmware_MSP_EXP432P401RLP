/*
 *  ======== package/cfg/app_pm4fg.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _applyChanges ========
 *  Changes that bring the build target to the state at the end of the build
 *  model
 */
function _applyChanges(obj, chgObj) {
    var wasSealed = false;
    if (obj.$sealed) {
        wasSealed = true;
        obj.$unseal();
    }
    for (var prop in chgObj) {
        if (typeof obj[prop] == 'object' && obj[prop] != undefined) {
            if ("$category" in obj[prop] && obj[prop].$category == "Vector") {
               obj[prop].length = chgObj[prop].length;
               for (var i = 0; i < chgObj[prop].length; i++) {
                   if (obj[prop].length < i + 1) {
                       obj[prop].length++;
                   }
                   obj[prop][i] = chgObj[prop][i];
               }
            }
            else {
        	_applyChanges(obj[prop], chgObj[prop]);
            }
	}
	else {
            obj[prop] = chgObj[prop];
	}
    }
    if (wasSealed) {
        obj.$seal();
    }
}

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
	if (obj[i] != null) {
	    if (typeof obj[i] == 'string') {
		obj[i] = unescape(obj[i]);
	    }
	    else if (typeof obj[i] == 'object') {
		_runescape(obj[i]);
	    }
	}
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {};
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        profile: "release",
        cfgScript: "C%3A/Users/Sam/workspace_v6_1/Octanis1-Mainboard-Firmware_MSP_EXP432P401RLP/app.cfg",
        cfgHome: "configPkg",
        cfgArgs: "null",
        cfgArgsEncoded: true,
        releases: {
            0: {
                name: "configPkg",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {},
                excludeDirs: {}
            }
        },
        prelink: false
    };
    _runescape(build);
    build.cfgArgs = null;
    build.target = xdc.module("gnu.targets.arm.M4F");
    var targChange = {
        platforms: [
            "ti.platforms.tiva%3ALM4F232H5QD"
        ],
        version: "gnu.targets.arm.M4F%7B1%2C0%2C4.8%2C4",
        extensions: {
            ".sm4fg": {
                suf: ".sm4fg",
                typ: "asm"
            },
            ".sv7M4": {
                suf: ".sv7M4",
                typ: "asm"
            },
            ".sv7M": {
                suf: ".sv7M",
                typ: "asm"
            }
        },
        versionMap: {
            "gcc4.6.1": "1%2C0%2C4.7",
            "gcc4.6.2": "1%2C0%2C4.7",
            "gcc4.6.3": "1%2C0%2C4.7",
            "gcc4.6.4": "1%2C0%2C4.7"
        },
        rootDir: "C%3A/ti/ccsv6/tools/compiler/gcc-arm-none-eabi-4_8-2014q3",
        ccOpts: {
            prefix: "-mcpu%3Dcortex-m4%20-march%3Darmv7e-m%20-mthumb%20-mfloat-abi%3Dhard%20-mfpu%3Dfpv4-sp-d16%20-D__MSP432P401R__%20-DTARGET_IS_FALCON%20-Dgcc%20-DMSP432WARE%20-Dtimegm%3Dmktime%20-I%22C%3A/ti/ccsv6/tools/compiler/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include%22%20-I%22C%3A/ti/ccsv6/ccs_base/arm/include%22%20-I%22C%3A/ti/ccsv6/ccs_base/arm/include/CMSIS%22%20-I%22C%3A/ti/tirtos_msp43x_2_12_01_33/products/MSPWare_2_00_00_40a/driverlib/MSP432P4xx%22%20-O0%20-ffunction-sections%20-fdata-sections%20-g%20-gdwarf-3%20-gstrict-dwarf%20-Wall%20%20%20-Wunused%20-Wunknown-pragmas%20-ffunction-sections%20-fdata-sections%20"
        },
        rawVersion: "4.8.4",
        GCCVERS: "4.8.4",
        BINVERS: "2.23",
        targetPkgPath: "C%3A/ti/tirtos_msp43x_2_12_01_33/products/bios_6_41_04_54/packages/gnu/targets/arm/"
    };
    _runescape(targChange);
    _applyChanges(build.target, targChange);

    prog.build = build;

    prog.name = "app.xm4fg";
    prog.cfgBase = "package/cfg/app_pm4fg";

    prog.endian = prog.build.target.model.endian;
    prog.codeModel = prog.build.target.model.codeModel;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.msp432.Platform");
    var platParams = _getPlatCfg();
    var invalidParams = [];
    for (var prop in platParams) {
        if (!(prop in Platform.PARAMS)) {
            delete platParams[prop];
            invalidParams.push(prop);
        }
    }
    prog.platformName = "ti.platforms.msp432:MSP432P401R";
    prog.platform = Platform.create("MSP432P401R", platParams);
    for (var i = 0; i < invalidParams.length; i++) {
        Platform.$logWarning("The parameter '" + invalidParams[i] + "' is " +
            "passed to this platform instance through Build.platformTable, " +
            "but the instance does not have a configuration parameter with " +
            "that name.", prog.platform, "MSP432P401R");
    }

    /* record the executable's package name */
    prog.buildPackage = "configPkg";

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);

    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("gnu.targets.arm.rtsv7M");
}

/* function to import the cfg script's package */
function _userscript(script) {
    var home;
    var spath;
    home = xdc.loadPackage("configPkg");

    xdc.om.$$bind('$homepkg', home);

    var cfgScript = "C:/Users/Sam/workspace_v6_1/Octanis1-Mainboard-Firmware_MSP_EXP432P401RLP/app.cfg";
    if (!script) {
        utils.loadCapsule(cfgScript, false, spath);
    }
    else {
        /* set up the same environment that loadCapsule would */
        var $saveCsd = utils.csd;
        var $cfgFile = utils.findFile(cfgScript, spath);
        var cname = cfgScript;
        if ($cfgFile) {
            $cfgFile = java.io.File($cfgFile);
            utils.csd = $cfgFile.getParentFile().getCanonicalPath();
            cname = "" + $cfgFile.getCanonicalPath();
        }

        /* create the capsule object */
        var cap = {
            prototype:  utils.global,
            $path:      cname,
            $private:   {path: cname},
            $capsule:   undefined,      /* set to cap below */
        };

        /* 'this.$capsule' is always cap object */
        cap.$capsule = cap;

        /* save the capsule object */
        utils.$$capmap[cname] = cap;

        try {
            var cx =
                Packages.org.mozilla.javascript.Context.getCurrentContext();
            var rdr = new
                java.io.BufferedReader(new java.io.StringReader(script));
            Packages.config.Shell.evaluateLoad(cx, cap, rdr, cname, 1);
        }
        finally {
            rdr.close();
            utils.csd = $saveCsd;
        }
    }
}

function _postinit() {
    var cout = null;

    var Program = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (Program.execCmd == null) {
        Program.execCmd = Program.platform.getExecCmd(Program,
            xdc.om["ti.platforms.msp432"].packageBase);
    }
    cout = "define EXEC." + Program.name + '\n\n';
    cout += Program.execCmd;
    cout += "\nendef\n\n";

    /* if SourceDir generates a makefile, we need to run it */
    _genSourceDirMak("package/cfg/app_pm4fg", "app.pm4fg");

    utils.genDep("package/cfg/app_pm4fg", "configPkg", utils.loadedFiles, cout, null);
}

function _genSourceDirMak(cfgBase, cfgName)
{
    var SourceDir = xdc.om['xdc.cfg.SourceDir'];

    if (SourceDir && SourceDir.$instances.length > 0) {
        /* construct rule to run SourceDir generated makefile */
        var make = "\t$(MAKE) -f "
            + SourceDir.outputDir + "/" + SourceDir.makefileName;

        /* this file is included by package.mak (if it exists) */
        var file = new java.io.File(cfgBase + ".cfg.mak");
        file["delete"]();
        var out = new java.io.BufferedWriter(new java.io.FileWriter(file));

        /* add rules to run SourceDir generated makefile */
        out.write("# invoke SourceDir generated makefile for " + cfgName
            + "\n" + cfgName + ": .libraries," + cfgName
            + "\n.libraries," + cfgName + ": " + cfgBase + ".xdl\n"
            + make + "\n\n"
            + "clean::\n" + make + " clean\n\n"
        );
        out.close();
        out = null;
    }
}
