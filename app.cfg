/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== app.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var Event = xdc.useModule('ti.sysbios.knl.Event');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Seconds = xdc.useModule('ti.sysbios.hal.Seconds');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');


/*
 *  Reducing the system stack size (used by ISRs and Swis) to reduce
 *  RAM usage.
 */
Program.stack = 3048;


/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = true;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

if(environment["configuration"] == "debug"){
    /* Enable Semihosting for GNU targets to print to CCS console */
    if (Program.build.target.$name.match(/gnu/)) {
        var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
    }
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Instrumented;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
BIOS.clockEnabled = true;
BIOS.heapSize = 3048;

/* Runtime stack checking is performed */
Task.checkStackFlag = true;
Hwi.checkStackFlag = true;



/* Reduce the number of task priorities */
Task.numPriorities = 4;


Task.common$.namedInstance = true;

/* ================ Task configuration ================ */


var cli_task_Params = new Task.Params();
cli_task_Params.instance.name = "cli_task";
cli_task_Params.stackSize = 900;
cli_task_Params.priority = 1;
Program.global.cli_task_xdc = Task.create("&cli_task", cli_task_Params);


var cli_print_task_Params = new Task.Params();
cli_print_task_Params.instance.name = "cli_print_task";
cli_print_task_Params.stackSize = 800;
cli_print_task_Params.priority = 1;
Program.global.cli_print_task_xdc = Task.create("&cli_print_task", cli_print_task_Params);


var gps_task_Params = new Task.Params();
gps_task_Params.instance.name = "gps_task";
gps_task_Params.stackSize = 904;
gps_task_Params.priority = 2;
Program.global.gps_task_xdc = Task.create("&gps_task", gps_task_Params);


var weather_task_Params = new Task.Params();
weather_task_Params.instance.name = "weather_task";
weather_task_Params.stackSize = 1500;
weather_task_Params.priority = 2;
Program.global.weather_task_xdc = Task.create("&weather_task", weather_task_Params);


var imu_task_Params = new Task.Params();
imu_task_Params.instance.name = "imu_task";
imu_task_Params.stackSize = 4048; //3000  is not enough!
imu_task_Params.priority = 3;
Program.global.imu_task_xdc = Task.create("&imu_task", imu_task_Params);

 
var comm_task_Params = new Task.Params();
comm_task_Params.instance.name = "comm_task";
comm_task_Params.stackSize =4048;
comm_task_Params.priority = 2;
Program.global.comm_task_xdc = Task.create("&comm_task", comm_task_Params);


var vision_task_Params = new Task.Params();
vision_task_Params.instance.name = "vision_task";
vision_task_Params.stackSize =1500;
vision_task_Params.priority = 2;
Program.global.vision_task_xdc = Task.create("&vision_task", vision_task_Params);

 
 
/* ================ Hwi configuration ================ */
var hwi_port1_Params = new Hwi.Params();
hwi_port1_Params.instance.name = "null";
var hwi_port1 = Hwi.create(51, "&port1_isr", hwi_port1_Params);

var hwi_port4_Params = new Hwi.Params();
hwi_port4_Params.instance.name = "null";
var hwi_port4 = Hwi.create(54, "&port4_isr", hwi_port4_Params);

var hwi_port5_Params = new Hwi.Params();
hwi_port5_Params.instance.name = "null";
var hwi_port5 = Hwi.create(55, "&port5_isr", hwi_port5_Params);

var hwi_timer_a0_Params = new Hwi.Params();
hwi_timer_a0_Params.instance.name = "null";
var hwi_timer_a0 = Hwi.create(25, "&timer_a0_isr", hwi_timer_a0_Params);

var hwi_timer_a2_Params = new Hwi.Params();
hwi_timer_a2_Params.instance.name = "null";
var hwi_timer_a2 = Hwi.create(29, "&timer_a2_isr", hwi_timer_a2_Params);

var hwi_timer_a3_Params = new Hwi.Params();
hwi_timer_a3_Params.instance.name = "null";
var hwi_timer_a3 = Hwi.create(31, "&timer_a3_isr", hwi_timer_a3_Params);
 

/* ================ Swi configuration ================ */
/* var swi0Params = new Swi.Params();
swi0Params.instance.name = "cli_print_swi";
swi0Params.priority = 1;
Program.global.swi0 = Swi.create("&cli_print_swi", swi0Params);
*/


/* ================ Clock configuration ================ */

//TODO: the following two clocks have been commented out to make the BNO055 work

var clockParams = new Clock.Params();
clockParams.period = 5000;
clockParams.startFlag = true;
clockParams.instance.name = "cron_quick";
Program.global.cron_quick = Clock.create("&cron_quick_clock", 5, clockParams);

var clock1Params = new Clock.Params();
clock1Params.instance.name = "cron_hourly";
clock1Params.period = 3600000;
clock1Params.startFlag = true;
Program.global.cron_hourly = Clock.create("&cron_hourly_clock", 10000, clock1Params);

var timestampParams = xdc.useModule('xdc.runtime.Timestamp');


/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 256;
LoggingSetup.mainLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 1024;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
TIRTOS.useUART = true;
TIRTOS.useI2C = true;
TIRTOS.usePWM = true;

TIRTOS.libType = TIRTOS.LibType_Instrumented;
LoggingSetup.enableTaskProfiler = true;
LoggingSetup.loggerType = LoggingSetup.LoggerType_STOPMODE;
Clock.tickMode = Clock.TickMode_PERIODIC;
Task.enableIdleTask = true;

/* ================ Mailbox configuration ================ */

//TODO: get rid of the following magic numbers

//holds printf messages for cli
var cli_print_mailboxParams = new Mailbox.Params();
cli_print_mailboxParams.instance.name = "cli_print_mailbox";
Program.global.cli_print_mailbox = Mailbox.create(20, 10, cli_print_mailboxParams);


//holds outgoing messages for commnunications
var comm_tx_mailboxParams = new Mailbox.Params();
comm_tx_mailboxParams.instance.name = "comm_tx_mailbox";
Program.global.comm_tx_mailbox = Mailbox.create(340, 5, comm_tx_mailboxParams);





